---

- name: '{{ ansible_influx_databases[database].name }} - Set database variable'
  set_fact:
    ifx_db: "{{ ansible_influx_databases[database]
      |combine({ 'continuous_query': {} } if ansible_influx_databases[database].continuous_query is not defined
      else { 'continuous_query': ansible_influx_databases[database].continuous_query }) }}"

# basic variables to ease conditions and other variable definitions
- name: '{{ ifx_db.name }} - Set simple defaults'
  set_fact:
    ifx_source_defined: "{{ ifx_db.source is defined and ifx_db.source.name is defined }}"
    ifx_src: "{{ ifx_db.source|default({}) }}"
    ifx_source_rp_defined: "{{ ifx_db.source is defined and ifx_db.source.rp_name is defined }}"
    ifx_source_drop: "{{ ifx_db.source.drop_after_backfill|default(false) if ifx_db.source is defined else false }}"

    ifx_cq_enabled: "{{ ifx_db.continuous_query.interval is defined }}"
    ifx_cq: "{{ ifx_db.continuous_query }}"
    ifx_cq_resample_defined: "{{ ifx_db.continuous_query.resample is defined
      and (ifx_db.continuous_query.resample.every is defined or ifx_db.continuous_query.resample.for is defined) }}"
    ifx_cq_resample_every_defined: "{{ ifx_db.continuous_query.resample is defined
      and ifx_db.continuous_query.resample.every is defined }}"
    ifx_cq_resample_for_defined: "{{ ifx_db.continuous_query.resample is defined
      and ifx_db.continuous_query.resample.for is defined }}"
    ifx_cq_where_defined: "{{ ifx_db.continuous_query.where is defined }}"
    ifx_cq_interval_name: "{{ ifx_db.continuous_query.interval|default('') }}"
    ifx_cq_offset: "{{ ifx_db.continuous_query.offset|regex_replace('([0-9]*)[smdw]', '\\1')
      if ifx_db.continuous_query.offset is defined else '' }}"
    ifx_cq_offset_unit: "{{ ifx_db.continuous_query.offset|regex_replace('[0-9]*([smdw])', '\\1')
      if ifx_db.continuous_query.offset is defined else '' }}"
    ifx_cq_groupby: "{{ ifx_db.continuous_query.groupby if ifx_db.continuous_query.groupby is defined else ['*'] }}"
    ifx_cq_recreate: "{{ recreate_cqs == 'yes' }}"

    ifx_rp_enabled: "{{ ifx_db.retention_policy is defined }}" # always true (mandatory)
    ifx_rp: "{{ ifx_db.retention_policy }}"
    ifx_rp_name_duration: "{{ ifx_db.retention_policy.amount+ifx_db.retention_policy.unit
      if ifx_db.retention_policy.amount is defined else 'forever' }}"
    ifx_rp_amount_defined: "{{ ifx_db.retention_policy.amount is defined }}"
    ifx_rp_amount: "{{ ifx_db.retention_policy.amount|default(0) }}"
    ifx_rp_unit_defined: "{{ ifx_db.retention_policy.unit is defined }}"
    ifx_rp_unit: "{{ ifx_db.retention_policy.unit|default('s') }}"
    ifx_rp_default: "{{ ifx_db.retention_policy.default|default(false) }}"

    ifx_bf_enabled: "{{ ifx_db.backfill is defined }}"
    ifx_backfill: "{{ ifx_db.backfill|default({}) }}"
    ifx_bf: "{{ ifx_db.backfill|default({}) }}"
    ifx_bf_interval_defined: "{{ ifx_db.backfill is defined and ifx_db.backfill.interval is defined }}"
    ifx_bf_interval: "{{ ifx_db.backfill.interval|default('*') if ifx_db.backfill is defined else '*' }}"
    ifx_bf_step_defined: "{{ ifx_db.backfill is defined and ifx_db.backfill.step is defined }}"
    ifx_bf_step: "{{ ifx_db.backfill.step|default(1) if ifx_db.backfill is defined else 1 }}"
    ifx_bf_stats: "{{ ifx_db.backfill.stats|default(false) if ifx_db.backfill is defined else false }}"
    ifx_bf_force: "{{ ifx_db.backfill.force|default(false) if ifx_db.backfill is defined else false }}"
    ifx_mm_defined: "{{ ifx_db.measurements is defined }}"
    mm_backfill_totals: []
    ifx_mm_bf_totals: []
    mm_downsampling_totals: []
    ifx_mm_ds_totals: []
    ifx_mode: ""

# for mode=setup
# NOT source OR source + cq + measurements
- name: "Identify 'setup' mode"
  set_fact:
    ifx_mode: "{{ 'setup' if not ifx_source_defined or (ifx_source_defined and ifx_cq_enabled and ifx_mm_defined)
      else ifx_mode }}"

# for mode=migrate
# source + cq + measurements + backfill [+bf.interval]
# HINT: source RP name can be empty = default
- name: "Identify 'migrate' mode"
  set_fact:
    ifx_mode: "{{ 'migrate' if ifx_source_defined and ifx_cq_enabled and ifx_mm_defined and ifx_bf_enabled
      else ifx_mode }}"

# for mode=compact
# source + source.rp_name + backfill [+bf.interval] + NOT cq
# + RP.default must be true when source.drop_after_backfill is true
- name: "Identify 'compact' mode"
  set_fact:
    ifx_mode: "{{ 'compact' if ifx_source_defined and ifx_source_rp_defined and ifx_bf_enabled and ifx_mm_defined
      and not ifx_cq_enabled else ifx_mode }}"

- name: '{{ ifx_db.name }} - Set dependent defaults'
  set_fact:
    db_prefix: "{{ ifx_mode+' '+ifx_db.name }} -"
    ifx_rp_name: "{{ ifx_rp.name if ifx_rp.name is defined else 'rp_'+ifx_rp_name_duration }}"
    ifx_rp_duration: "{{ ifx_rp_name_duration if ifx_rp_name_duration != 'forever' else '0s' }}" # actual RP duration

    # CQ: time(interval+offset), name+interval
    ifx_cq_where: "{{ 'WHERE '+ifx_cq.where if ifx_cq_where_defined else '' }}"
    ifx_cq_resample: "{{ 'RESAMPLE ' if ifx_cq_resample_defined else '' }}"
    ifx_cq_resample_every: "{{ 'EVERY '+ifx_cq.resample.every if ifx_cq_resample_every_defined else '' }}"
    ifx_cq_resample_for: "{{ 'FOR '+ifx_cq.resample.for if ifx_cq_resample_for_defined else '' }}"

    # BF: time(interval)|*, name+amount+unit - '*' only when compact?
    # interval/where/groupby default : CQ interval/where/groupby
    ifx_bf_interval: "{{ ifx_bf_interval if ifx_bf_interval_defined else ifx_cq_interval_name }}"
    ifx_bf_where: "{{ 'AND '+ifx_cq.where if ifx_cq_where_defined else '' }}"
    ifx_bf_groupby: "{{ [] if ifx_bf_interval_defined and ifx_bf.interval == '*' else ifx_cq_groupby }}"

    ifx_source_rp_name: "{{ ifx_src.rp_name|default('') if ifx_source_defined else '' }}"
    # when retention_policy.default=true, unless drop after backfill (compact mode) - it will switch DEFAULT later
    ifx_rp_default_string: "{{ 'DEFAULT' if ifx_rp_default and not ifx_mode == 'compact' else '' }}"

- name: '{{ db_prefix }} Database definition, mode "{{ ifx_mode }}" on "{{ ifx_db.name }}
    (recreate CQs: {{ ifx_cq_recreate }})"'
  debug: var=ifx_db

### Validate configuration
- name: "Assert basic DB attributes"
  fail:
    msg: "Attribute 'name' must be defined!"
  when: ifx_db.name is not defined

- name: "Assert 'source' and 'measurement' depend on each other"
  fail:
    msg: "Both 'source' and 'measurement' must be defined OR none of them"
  when: (ifx_source_defined and not ifx_mm_defined) or (not ifx_source_defined and ifx_mm_defined)

- name: "Assert 'retention_policy' name is defined"
  fail:
    msg: "Attribute 'retention_policy' with 'amount'+'unit' OR 'name' must be defined!"
  when: not ((ifx_rp_amount_defined and ifx_rp_unit_defined) or ifx_rp.name is defined)

- name: "Assert 'interval' (cq or bf) must be defined when 'measurements' are defined"
  fail:
    msg: "Attribute 'continuous_query.interval' OR 'backfill.interval' must be defined when defining 'measurements'!"
  when: ifx_mm_defined and not ifx_cq_enabled and not ifx_bf_enabled

- name: "Assert 'source' must be defined for backfilling or continuous queries"
  fail:
    msg: "Attribute 'source' is required for 'backfill' or 'continuous_query'"
  when: not ifx_source_defined and (ifx_cq_enabled or ifx_bf_enabled)

- name: "Assert backfill RP dependency"
  fail:
    msg: "Attribute 'backfill' requires 'retention_policy' with 'amount' + 'unit'!"
  when: ifx_bf_enabled and not (ifx_rp_amount is defined and ifx_rp_unit is defined)

- name: "Assert 'retention_policy.default' must be TRUE when 'source.drop_after_backfill' is TRUE"
  fail:
    msg: "Cannot drop source without making new RP the default"
  when: ifx_source_drop and not ifx_rp_default

- name: "Assert 'source.rp_name' must be set when 'source.drop_after_backfill' is TRUE"
  fail:
    msg: "Cannot drop unnamed source, define 'source.rp_name'!"
  when: ifx_source_drop and not ifx_source_rp_defined

### START
- name: '{{ db_prefix }} Create database'
  uri:
    url: "{{ ansible_influx_url }}/query"
    method: POST
    body: "q=CREATE DATABASE {{ ifx_db.name }}"
    return_content: yes
    url_username: "{{ username }}"
    url_password: "{{ password }}"
  when: ifx_db.name not in ifx_dbs
  register: ansible_influx_db_create
  changed_when: ansible_influx_db_create.status == 200 and ansible_influx_db_create.json is defined
    and ansible_influx_db_create.json.results[0].statement_id == 0

- name: '{{ db_prefix }} Get SOURCE retention policies'
  uri:
    url: "{{ ansible_influx_url }}/query?db={{ ifx_db.source.name }}"
    method: POST
    body: "q=SHOW RETENTION POLICIES"
    return_content: yes
    url_username: "{{ username }}"
    url_password: "{{ password }}"
  register: ansible_influx_source_rps
  when: ifx_source_defined

- name: '{{ db_prefix }} Get SOURCE measurements'
  uri:
    url: "{{ ansible_influx_url }}/query?db={{ ifx_db.source.name }}"
    method: POST
    body: "q=SHOW MEASUREMENTS"
    return_content: yes
    url_username: "{{ username }}"
    url_password: "{{ password }}"
  register: ansible_influx_source_mms
  when: ifx_source_defined and ifx_mode != 'compact'

- name: '{{ db_prefix }} Get TARGET retention policies'
  uri:
    url: "{{ ansible_influx_url }}/query?db={{ ifx_db.name }}"
    method: POST
    body: "q=SHOW RETENTION POLICIES"
    return_content: yes
    url_username: "{{ username }}"
    url_password: "{{ password }}"
  register: ansible_influx_rps
  when: ansible_influx_db_create is not changed

- name: '{{ db_prefix }} Get TARGET measurements'
  uri:
    url: "{{ ansible_influx_url }}/query?db={{ ifx_db.name }}"
    method: POST
    body: "q=SHOW MEASUREMENTS"
    return_content: yes
    url_username: "{{ username }}"
    url_password: "{{ password }}"
  register: ansible_influx_mms
  when: ansible_influx_db_create is not changed and ifx_mode != 'compact'

- name: '{{ db_prefix }} List of retention policies and measurements'
  set_fact:
    ifx_rps: "{{ ansible_influx_rps.json.results
      |selectattr('series','defined')|map(attribute='series')|flatten
      |selectattr('values','sequence')|map(attribute='values')|flatten
      if ansible_influx_db_create is not changed else [] }}"
    ifx_source_rps: "{{ ansible_influx_source_rps.json.results
      |selectattr('series','defined')|map(attribute='series')|flatten
      |selectattr('values','sequence')|map(attribute='values')|flatten
      if ifx_source_defined else [] }}"
    ifx_mms: "{{ ansible_influx_mms.json.results
      |selectattr('series', 'defined')|map(attribute='series')|flatten
      |rejectattr('values', 'callable')|map(attribute='values')|flatten
      if ansible_influx_mms is not skipped and ansible_influx_mms.json.results is defined else [] }}"
    ifx_source_mms: "{{ ansible_influx_source_mms.json.results
      |selectattr('series','defined')|map(attribute='series')|flatten
      |rejectattr('values', 'callable')|map(attribute='values')|flatten
      if ansible_influx_source_mms is not skipped and ansible_influx_source_mms.json.results is defined else [] }}"

- name: '{{ db_prefix }} Set dependent facts'
  set_fact:
    # assume default exists when referencing default!
    ifx_source_exists: "{{ ifx_db.source.rp_name in ifx_source_rps
      if ifx_source_defined and ifx_source_rp_name else false }}"
    ifx_backfill_start: "{{ lookup('pipe','date +%s') }}"

#- debug:
#    var: ansible_influx_source_rps
#- debug:
#    msg: "source_exists = {{ ifx_db.source.rp_name }} in {{ ifx_source_rps }}
#          if {{ ifx_source_defined }} and {{ ifx_source_rp_name }} else false"

- name: '{{ db_prefix }} Source must exist for compact'
  debug:
    msg: "Source '{{ ifx_db.source.name }}.{{ ifx_source_rp_name }}' must exist, skipping measurements and backfill"
  when: ifx_source_drop and not ifx_source_exists

- name: '{{ db_prefix }} Print SOURCE measurements'
  debug:
    msg: "List of measurements on SOURCE = {{ ifx_source_mms|join(', ') }}"
  when: ifx_source_defined and not ifx_source_drop and ifx_source_exists
  failed_when: ifx_source_mms|length == 0

- name: '{{ db_prefix }} Print TARGET measurements'
  debug:
    msg: "List of measurements on TARGET = {{ ifx_mms|join(', ') }}"
  when: ifx_mms|length > 0

- name: '{{ db_prefix }} Create retention policy {{ ifx_rp_name }}'
  uri:
    url: "{{ ansible_influx_url }}/query?db={{ ifx_db.name }}"
    method: POST
    body: >
      q=CREATE RETENTION POLICY "{{ ifx_rp_name }}" ON "{{ ifx_db.name }}"
      DURATION {{ ifx_rp_duration }} REPLICATION 1 {{ ifx_rp_default_string }}
    return_content: yes
    url_username: "{{ username }}"
    url_password: "{{ password }}"
  when: ansible_influx_db_create is changed or (ifx_rps is defined and ifx_rp_name not in ifx_rps)
  register: ansible_influx_rp_create
  changed_when: ansible_influx_rp_create.status == 200 and ansible_influx_rp_create.json is defined
    and ansible_influx_rp_create.json.results[0].statement_id == 0

- name: '{{ db_prefix }} Create measurements'
  include_tasks: influxdb_measurement.yml # no longer supported: measurement={{ mm_item }}
  with_items: "{{ ifx_db.measurements|sort }}"
  vars:
    measurement: "{{ mm_item }}"
  loop_control: { loop_var: mm_item }
  when: ifx_mm_defined and (ifx_source_exists or not ifx_source_rp_name)
    and (ifx_cq_recreate or ansible_influx_db_create is changed or mm_item not in ifx_mms or ifx_bf_force)

# count new metrics -> if 0, then skip backfill
- name: '{{ db_prefix }} Count new metrics in default RP'
  uri:
    url: "{{ ansible_influx_url }}/query?db={{ ifx_db.name }}"
    method: POST
    body: >
      q=SELECT COUNT(*)
      FROM "{{ ifx_db.source.name }}"."{{ ifx_source_rp_name }}"./^({{ ifx_db.measurements|join('|') }})$/
      WHERE time >= {{ ifx_backfill_start }}000ms
    return_content: yes
    url_username: "{{ username }}"
    url_password: "{{ password }}"
  register: ansible_influx_newmetrics
  when: ifx_source_drop and ifx_source_exists

- name: '{{ db_prefix }} Set count_newmetrics'
  set_fact:
    count_newmetrics: "{{ 0 if ansible_influx_newmetrics.json.results[0].series is not defined else
      ansible_influx_newmetrics.json.results
      |selectattr('series','defined')|map(attribute='series')|flatten
      |map(attribute='values')|flatten|select('number')|map('int')|max }}"
  when: ifx_source_drop and ifx_source_exists

- name: '{{ db_prefix }} Ask to continue and switch default RP (may result in data loss!)'
  pause:
    prompt: "I will now backfill gap and switch default RP and DROP the source! Continue?"
  when: ifx_source_drop and ifx_source_exists and count_newmetrics|int > 0

# run twice -> sum up results
- name: '{{ db_prefix }} Set backfill_start2'
  set_fact:
    ifx_backfill_start2: "{{ lookup('pipe','date +%s') }}"
- name: '{{ db_prefix }} Backfill again (1) since start (close gap)'
  uri:
    url: "{{ ansible_influx_url }}/query?db={{ ifx_db.name }}"
    method: POST
    body: >
      q=SELECT * INTO "{{ ifx_db.name }}"."{{ ifx_rp_name }}".:MEASUREMENT
      FROM "{{ ifx_db.source.name }}"."{{ ifx_source_rp_name }}"./^({{ ifx_db.measurements|join('|') }})$/
      WHERE time >= {{ ifx_backfill_start }}000ms
      GROUP BY *
    return_content: yes
    url_username: "{{ username }}"
    url_password: "{{ password }}"
  register: ansible_influx_bf_closegap
  when: ifx_source_drop and ifx_source_exists and count_newmetrics|int > 0

- name: '{{ db_prefix }} Backfill again (2) since start (close gap)'
  uri:
    url: "{{ ansible_influx_url }}/query?db={{ ifx_db.name }}"
    method: POST
    body: >
      q=SELECT * INTO "{{ ifx_db.name }}"."{{ ifx_rp_name }}".:MEASUREMENT
      FROM "{{ ifx_db.source.name }}"."{{ ifx_source_rp_name }}"./^({{ ifx_db.measurements|join('|') }})$/
      WHERE time >= {{ ifx_backfill_start2 }}000ms
      GROUP BY *
    return_content: yes
    url_username: "{{ username }}"
    url_password: "{{ password }}"
  register: ansible_influx_bf_closegap2
  when: ifx_source_drop and ifx_source_exists and count_newmetrics|int > 0

- name: '{{ db_prefix }} Get backfill points written'
  set_fact:
    db_backfill_closegap: "{{ ansible_influx_bf_closegap.json.results
      |selectattr('series', 'defined')|map(attribute='series')|flatten
      |map(attribute='values')|flatten|select('number')|map('int')|sum(start=0) }}"
    db_backfill_closegap2: "{{ ansible_influx_bf_closegap2.json.results
      |selectattr('series', 'defined')|map(attribute='series')|flatten
      |map(attribute='values')|flatten|select('number')|map('int')|sum(start=0) }}"
  when: ansible_influx_bf_closegap is not skipped

#- debug:
#    msg="{{ ansible_influx_bf_closegap.json.results
#         |selectattr('series', 'defined')|map(attribute='series')|flatten
#         |map(attribute='values')|flatten }}"
#  when: ansible_influx_bf_closegap is not skipped

- name: '{{ db_prefix }} Backfill again points written'
  debug:
    msg: "Total data points written = {{ db_backfill_closegap+db_backfill_closegap2 }}"
  when: ansible_influx_bf_closegap is not skipped

- name: '{{ db_prefix }} Make RP the default'
  uri:
    url: "{{ ansible_influx_url }}/query?db={{ ifx_db.name }}"
    method: POST
    body: >
      q=ALTER RETENTION POLICY "{{ ifx_rp_name }}" ON "{{ ifx_db.name }}" DEFAULT
    return_content: yes
    url_username: "{{ username }}"
    url_password: "{{ password }}"
  register: ansible_influx_rp_alter
  when: ifx_source_drop and ifx_source_exists
  changed_when: ansible_influx_rp_alter.status == 200 and ansible_influx_rp_alter.json is defined
    and ansible_influx_rp_alter.json.results[0].statement_id == 0

- name: '{{ db_prefix }} Total data points written'
  debug:
    msg: "Total data points written = {{ mm_backfill_totals|map('int')|sum(start=0) }}"
  when: ifx_bf_enabled

- name: '{{ db_prefix }} Average series downsampling'
  debug:
    msg: "Average series downsampling =
          {{ (mm_downsampling_totals|map('float')|sum(start=0) / mm_downsampling_totals|length) |round(2) }} %"
  when: ifx_bf_enabled and mm_downsampling_totals|length > 0

- name: '{{ db_prefix }} Total duration'
  debug:
    msg: "Total duration = {{ (lookup('pipe','date +%s')|int - ifx_backfill_start|int)/60 }} minutes"

- name: '{{ db_prefix }} Drop old RP (compact)'
  uri:
    url: "{{ ansible_influx_url }}/query?db={{ ifx_db.name }}"
    method: POST
    body: >
      q=DROP RETENTION POLICY "{{ ifx_db.source.rp_name }}" ON "{{ ifx_db.source.name }}"
    return_content: yes
    url_username: "{{ username }}"
    url_password: "{{ password }}"
  register: ansible_influx_source_drop
  when: ifx_source_drop and ifx_source_exists and ifx_source_rp_name
